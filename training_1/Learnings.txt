- PHP hat ein dynamisches Typkonzept
- Die Datentypen werden in 99% der Fälle intuitiv richtig interpretiert
- Es gibt interessante Edge Cases wie PHP_INT_MAX + 1 oder (bool) "false"

- PHP arbeitet intern mit einer Copy on Write-Strategie. Daten werden, auch
  wenn sie by Value übergeben werden, nur dann kopiert, wenn auch tatsächlich
  schreibender Zugriff erfolgt (siehe Call by Value vs. Call by Reference)
- Die explizite Verwendung von Referenzen (mittels vorangestelltem &) ist
  in 99.9% der Anwendungsfälle überflüssig und falsch
- Funktionen haben genau einen Rückgabewert (implizit null). Falls eine Funktion
  mehr als einen Wert zurückgeben muss, Objekte verwenden

- Separation of Concerns: unterschiedliche Belange sollen getrennt werden

- Single Responsibility: jede Klasse soll eine klar definierte Aufgabe haben
  Trick: Wenn die Prosa-Dokumentation ein "und" enthält ...
 
- Single Responsibility: jede Methode soll genau eine Aufgabe haben
  Trick: Wenn die Prosa-Dokumentation der Methode ein "und" enthält ...
  
- Nouns and Verbs: ein guter erster Schritt für die OO-Modellierung ist es,
  aus der Beschreibung die Hauptworte zu Klassen und die Verben zu Methoden
  zu machen
  
- Es gibt immer Cross-cutting concerns wie Logging oder Security

- Für Geschäftslogik ist es ist egal, woher Daten kommen
- Für Geschäftslogik ist es ist egal, wohin die Daten gehen

- Eine Klasse ist ein Bauplan für Objekte
- Eine Instanz ist ein Objekt, das innerhalb eines PHP-Prozesses "lebt"

- Der Konstruktor __construct() wird automatisch aufgerufen, wenn man mit
  new eine Objektinstanz erzeugt
- Aufgabe des Konstruktors ist es, das Objekt in einen definierten
  Initialzustand zu bringen 
- Im Konstruktor wird nie echte Arbeit erledigt

- Es gibt drei Stufen der Sichtbarkeit, public, protected und private
- Die öffentliche Schnittstelle eines Objektes ist immer möglichst klein
- Attribute und Methoden haben immer die minimale Sichtbarkeit (standardmäßig
  private)
- Nach Bedarf private Attribute mit protected Zugriffsmethoden versehen, um
  aus Subklassen darauf zugreifen zu können
- Zugriffsmethoden (Accessoren, Getter, Setter) ermöglichen den Zugriff auf
  Attribute und sind die richtige Stelle für Validierungen (Geschäftsregeln)
- Auch nicht-öffentliche Zugriffsmethoden sind sinnvoll, wenn
  Integritätsbedingungen erzwungen werden sollen 
- Für welche Attribute schreibender Zugriff per Accessoren möglich ist,
  ist eine reine Geschäftsentscheidung. Standardmäßig: keine
- Standardmäßig wird für ein Attribut kein Getter geschrieben, sondern nur
  dann, wenn die Anwendung dies explizit erfordert

- Geheimnisprinzip: die Implementierung und der innere Zustand eines Objektes
  sind geheim, also nicht nach Außen sichtbar. Daher kann es per Definition
  keinerlei Abhängigkeiten darauf geben (außer über die definierte, möglichst
  kleine öffentliche API). Das bedeutet, dass man die Implementierung eines
  Objektes jederzeit ändern kann, solange man die Schnittstelle nach Außen
  noch erfüllt

- Vererbung: eine von einer Elternlasse abgeleitete Klasse erbt deren
  Attribute und Methoden (soweit sie nicht private sind). Vererbung dient dazu,
  existierende Funktionalität zu erweitern, ohne bestehenden Code zu ändern
  
- Vererbung ist nicht der richtige Weg, um Funktionalität in eine Klasse zu
  bekommen. Dafür gibt es Aggregation

- Objekt-Instanzen werden mit new erzeugt

- parent:: ruft eine Methode in der Elternklasse auf (siehe Polymorphismus). 
  Das ist ein guter Weg, um Funktionalität aus einer Elternklasse zu erweitern,
  ohne Code zu duplizieren

- Ziel von gutem OOP-Design sind kleine, dumme Objekte, die miteinander
  kollaborieren

- (öffentliche) Schnittstelle: alle öffentlichen Methoden, jeweils mit einer
  bestimmten Parametersignatur (Anzahl, ggf. Typ, ggf. Default-Werte, eigentlich
  auch ob ein Parameter eine Referenz ist). Dazu gehören auch die Rückgabewerte
  und alle Exceptions, die eine Methode möglichweise werfen kann

- Polymorphismus bedeutet (unter anderem), dass zur Laufzeit entschieden wird, 
  in welchem Objekt eine Methode aufgerufen wird

- Exceptions sind Objekte, die nicht erwartete Fehler kommunizieren. Sie sind 
  immer zweifelsfrei vom Wertebereich eines gültigen Rückgabewertes
  unterscheidbar
- Exceptions werden geworfen und (woanders) gefangen und sind damit zur Laufzeit
  goto-Statements
- Niemals Kontrollfluss mit Exceptions implementieren
- Exceptions können (und sollen) Umgebungsinformationen beinhalten

- Type Hint: PHP erzwingt für nicht-skalare Typen (Arrays, Objekte) mit Type
  Hint, dass übergebene Parameter diesem Typ entsprechen. Ansonsten gibt es
  einen Laufzeitfehler. Type Hints sparen somit eine explizite Typ-Prüfung
  
- Code-Duplikation ist langfristig gesehen gefährlich, teuer, und damit tödlich.
  Man vermeidet Code-Duplikation aber nicht durch spekulative Generalisierung,
  sondern dann und erst dann, wenn sie tatsächlich entstanden ist

- Nur kurze Codeblöcke sind sinnvoll wiederverwendbar  

- Es ist essentiell, zwischen API und Implementierung zu unterscheiden.
  Das ermöglicht es, in Schnittstellen zu denken anstelle in Implementierung
